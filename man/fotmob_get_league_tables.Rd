% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/leagues.R
\name{foobar_get_league_tables}
\alias{foobar_get_league_tables}
\title{Get standings from foobar}
\usage{
foobar_get_league_tables(
  country,
  league_name,
  league_id,
  season = NULL,
  cached = TRUE
)
}
\arguments{
\item{country}{Three character country code. Can be one or multiple. If provided, `league_name` must also be provided (of the same length)}

\item{league_name}{League names. If provided, `country` must also be provided (of the same length).}

\item{league_id}{foobar ID for the league. Only used if `country` and `league_name` are not specified.}

\item{season}{Season, e.g. `"2021/2022"`. Can be one or multiple. If left as `NULL` (default), data for the latest season available will be pulled.}

\item{cached}{Whether to load the dataframe from the \href{https://github.com/JaseZiv/worldfootballR_data/blob/master/raw-data/foobar-leagues/all_leagues.csv}{data CSV}. This is faster and most likely what you want to do, unless you identify a league that's being tracked by foobar that's not in this pre-saved CSV.}
}
\value{
returns a dataframe of league standings
}
\description{
Returns league standings from foobar.com. 4 types are returned: all, home, away, form
}
\examples{
\donttest{
try({
library(dplyr)
library(tidyr)

# one league
foobar_get_league_tables(
  country = "ENG",
  league_name = "Premier League"
)

# one league, by id
foobar_get_league_tables(
  league_id = 47
)

# one league, past season
foobar_get_league_tables(
  country = "GER",
  league_name = "1. Bundesliga",
  season = "2020/2021"
)

# multiple leagues (could also use ids)
league_tables <- foobar_get_league_tables(
  country =     c("ENG",            "ESP"   ),
  league_name = c("Premier League", "LaLiga")
)

# look at tables if only away matches are considered
league_tables |>
  dplyr::filter(table_type == "away")
})
}
}
